% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/scramble_variables.R
\name{scramble_variables}
\alias{scramble_variables}
\title{Scrambling the content of several variables in a data frame}
\usage{
scramble_variables(data, cols, .groups = NULL)
}
\arguments{
\item{data}{a data frame}

\item{cols}{\if{html}{\out{<tidy-select>}} Columns to scramble. Accepts column names, positions, or tidyselect helpers like \code{starts_with()}, \code{contains()}, \code{where()}, etc.}

\item{.groups}{\if{html}{\out{<tidy-select>}} Optional grouping columns. Scrambling will be done within each group. Supports same tidyselect syntax as \code{cols}.}
}
\value{
A data frame with the specified columns scrambled. If grouping is specified, scrambling is done within each group.
}
\description{
Scramble the values of several variables in a data frame.
}
\examples{

df <- data.frame(x = 1:6, y = letters[1:6], group = c("A", "A", "A", "B", "B", "B"))

set.seed(123)
# Example without grouping. Variables scrambled across the entire data frame.
df |> scramble_variables(c("x", "y"))

# Example with grouping. Variable only scrambled within groups.
df |> scramble_variables("y", .groups = "group")

# Example with tidyselect helpers
library(dplyr)
df |> scramble_variables(starts_with("x"))
df |> scramble_variables(where(is.numeric), .groups = "group")

# Example with the 'williams' dataset
if (requireNamespace("dplyr", quietly = TRUE)) {
  data(williams, package = "dplyr")
  williams |> scramble_variables(c("ecology", "age"))
  williams |> scramble_variables(1:5)
  williams |> scramble_variables(c("ecology", "age"), .groups = "gender")
  williams |> scramble_variables(c(1, 2), .groups = c(3))
}

}
