% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mask_names.R
\name{mask_names}
\alias{mask_names}
\title{Mask variable names with anonymous labels}
\usage{
mask_names(data, ..., prefix = "variable_set_", suffix = NULL)
}
\arguments{
\item{data}{a data frame}

\item{...}{\if{html}{\out{<tidy-select>}} One or more variable sets. Each can be:
\itemize{
\item A tidyselect expression (e.g., \code{starts_with("treatment_")})
\item A character vector of column names (e.g., \code{c("var1", "var2")})
\item Multiple sets can be provided as separate arguments
}}

\item{prefix}{character string to use as base prefix for masked names.
Default is "variable_set_"}

\item{suffix}{character string to append to prefix for each variable set.
If NULL (default), uses letters A, B, C, etc. for each set.}
}
\value{
A data frame with the specified variables renamed to masked names.
}
\description{
Assigns new masked names to groups of variables in a data frame.
Each group of variables gets its own prefix for the masked names,
such as "variable_set_A_01", "variable_set_B_01", etc.
The function ensures no name collisions occur with existing column names.
}
\examples{
df <- data.frame(
  treat_1 = c(1, 2, 3),
  treat_2 = c(4, 5, 6),
  outcome_a = c(7, 8, 9),
  outcome_b = c(10, 11, 12),
  id = 1:3
)

# Mask two variable sets with default prefixes
mask_names(df, 
  starts_with("treat_"), 
  starts_with("outcome_")
)

# Using character vectors
mask_names(df, 
  c("treat_1", "treat_2"), 
  c("outcome_a", "outcome_b")
)

# Custom prefix
mask_names(df, 
  starts_with("treat_"), 
  prefix = "masked_var_"
)

}
